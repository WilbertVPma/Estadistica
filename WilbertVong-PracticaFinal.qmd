---
format: html
editor: visual
---

```{r}
library(ggplot2)
library(magrittr)
```

Cargar los datos en un dataframe llamado: airbnb

```{r}
airbnb<-read.csv('data//airbnb.csv',sep = ',', stringsAsFactors = T)
```

Mostrar las primeras 6 filas del dataframe

```{r}
head(airbnb)
```

Renombrar las columnas de la siguiente forma:

| Nombre original        | Nuevo nombre   |
|------------------------|----------------|
| Zipcode                | CodigoPostal   |
| Neighbourhood.Cleansed | Barrio         |
| Property.Type          | TipoPropiedad  |
| Room.Type              | TipoAlquiler   |
| Accommodates           | MaxOcupantes   |
| Bathrooms              | NumBanyos      |
| Bedrooms               | NumDormitorios |
| Beds                   | NumCamas       |
| Bed.Type               | TipoCama       |
| Amenities              | Comodidades    |
| Square.Feet            | PiesCuadrados  |
| Price                  | Precio         |
| Review.Scores.Rating   | Puntuacion     |

```{r}
colnames(airbnb)<-c("CodigoPostal","Barrio","TipoPropiedad","TipoAlquiler","MaxOcupantes","NumBanyos",
"NumDormitorios","NumCamas","TipoCama","Comodidades","PiesCuadrados","Precio","Puntuacion")
colnames(airbnb)
```

Crea una nueva columna llamada MetrosCuadrados a partir de la columna PiesCuadrados.

Ayuda: 1 pie cuadrado son 0,092903 metros cuadrdados

```{r}
airbnb$MetrosCuadrados <- airbnb$PiesCuadrados*0.092903
head(airbnb)
```

Miremos el código postal. Es una variable con entradas erroneas. Hay valores como '','-' y '28' que deberían ser considerados como NA. Así mismo también debería ser NA todos los que no compiencen por 28, ya que estamos con códigos postales de Madrid

El código postal 28002, 28004 y 28051 tienen entradas repetidas. Por ejemplo las entradas 28002\n20882 deberían ir dentro de 28002

El codigo 2804 debería ser 28004, 2805 deberia ser 28005 y 2815 juncto con 2815 debería ser 28015

Limpia los datos de la columna Codigo Postal

```{r}
airbnb$CodigoPostal <- replace(airbnb$CodigoPostal, airbnb$CodigoPostal == '' | airbnb$CodigoPostal == '-' | airbnb$CodigoPostal == '28', NA)

airbnb$CodigoPostal <- as.character(airbnb$CodigoPostal)

airbnb$CodigoPostal <- gsub("\n.*", "", airbnb$CodigoPostal)

airbnb$CodigoPostal <- replace(airbnb$CodigoPostal, airbnb$CodigoPostal == "2804", "28004")
airbnb$CodigoPostal <- replace(airbnb$CodigoPostal, airbnb$CodigoPostal == "2805", "28005")
airbnb$CodigoPostal <- replace(airbnb$CodigoPostal, airbnb$CodigoPostal == "2815", "28015")
airbnb$CodigoPostal <- replace(airbnb$CodigoPostal, airbnb$CodigoPostal == "280013", "28013")
airbnb$CodigoPostal <- gsub("^Madrid\\s+", "", airbnb$CodigoPostal)


airbnb$CodigoPostal <- replace(airbnb$CodigoPostal, !grepl("^28", airbnb$CodigoPostal), NA)

```

Una vez limpios los datos ¿Cuales son los códigos postales que tenemos?

```{r}
table(airbnb$CodigoPostal)
```

¿Cuales son los 5 códigos postales con más entradas? ¿Y con menos? ¿Cuantas entradas tienen?

```{r}
#Códigos postales con más entradas

frecuencias <- table(airbnb$CodigoPostal)

frecuencias_ord <- sort(frecuencias, decreasing = TRUE)

head(frecuencias_ord, n = 5)
```

```{r}
#Códigos postales con menos entradas

frecuencias <- table(airbnb$CodigoPostal)

frecuencias_ord <- sort(frecuencias, decreasing = FALSE)

head(frecuencias_ord, n = 5)
```

¿Cuales son los barrios que hay en el código postal 28012?

```{r}

airbnb_28012 <- subset(airbnb, CodigoPostal == "28012")

tabla_barrios <- table(airbnb_28012$Barrio)

barrios_28012 <- names(tabla_barrios[tabla_barrios > 0])

print(barrios_28012)

```

¿Cuantas entradas hay en cada uno de esos barrios para el codigo postal 28012?

```{r}

tabla_barrios <- table(airbnb_28012$Barrio)

tabla_barrios_df <- as.data.frame(tabla_barrios)
names(tabla_barrios_df) <- c("Barrio", "Entradas")

tabla_barrios_filtrada <- subset(tabla_barrios_df, Entradas > 0)

print(tabla_barrios_filtrada)

```

¿Cuantos barrios hay en todo el dataset airbnb? ¿Cuales son?

```{r}

barrios_airbnb <- unique(airbnb$Barrio)

cat("Hay", length(barrios_airbnb), "barrios en el dataset airbnb.\n")

cat("\n")

print(barrios_airbnb)

```

¿Cuales son los 5 barrios que tienen mayor número entradas?

```{r}

mas_entradas_airbnb <- table(airbnb$Barrio)

entradas_ord <- sort(mas_entradas_airbnb, decreasing = TRUE)

head(entradas_ord, n = 5)
```

¿Cuantos Tipos de Alquiler diferentes hay? ¿Cuales son? ¿Cuantas entradas en el dataframe hay por cada tipo?

```{r}

table(airbnb$TipoAlquiler)

```

Muestra el diagrama de cajas del precio para cada uno de los diferentes Tipos de Alquiler

```{r}
library(ggplot2)

ggplot(airbnb, aes(x = TipoAlquiler, y = Precio)) +
  geom_boxplot() +
  labs(title = "Precio - Tipo de Alquiler", x = "Tipo de alquiler", y = "Precio")+
scale_y_continuous(breaks = seq(0, 1000, by = 50))

```

Cual es el precio medio de alquiler de cada uno, la diferencia que hay ¿es estadísticamente significativa? ¿Con que test lo comprobarías?

```{r}
library(dplyr)
#Calculando el precio medio de alquiler de cada TipoAlquiler
airbnb %>%
  group_by(TipoAlquiler) %>%
  summarize(PrecioMedio = mean(Precio, na.rm = TRUE))

for (v in levels(airbnb$TipoAlquiler)){
    print(paste("Tipo de alquiler:", v, "pvalue,",
                shapiro.test(head(airbnb$Precio[airbnb$TipoAlquiler==v], 5000))$p.value))
}

kruskal.test(Precio ~ TipoAlquiler, data = airbnb)

```

Filtra el dataframe cuyos tipo de alquiler sea 'Entire home/apt' y guardalo en un dataframe llamado *airbnb_entire*. Estas serán las entradas que tienen un alquiler del piso completo.

```{r}
airbnb_entire <- subset(airbnb, TipoAlquiler == "Entire home/apt")

head(airbnb_entire)
```

¿Cuales son los 5 barrios que tienen un mayor número de apartamentos enteros en alquiler? Nota: Mirar solo en airbnb_entire. A partir de este punto y hasta que se diga lo contrario partiremos de airbnb_entire.

```{r}
airbnb_entire <- subset(airbnb, TipoAlquiler == "Entire home/apt")

apartamentos_enteros <- table(airbnb_entire$Barrio)

top_5_barrios <- head(sort(apartamentos_enteros, decreasing = TRUE), 5)

print(top_5_barrios)

```

¿Cuales son los 5 barrios que tienen un mayor precio medio de alquiler para apartamentos enteros (es decir, del dataframe airbnb_entire)?

¿Cual es su precio medio?

Ayuda: Usa la función aggregate `aggregate(.~colname,df,mean,na.rm=TRUE)`

```{r}
precio_medio <- aggregate(Precio ~ Barrio, data = airbnb_entire, FUN = mean, na.rm = TRUE)

precio_medio_ord <- precio_medio[order(precio_medio$Precio, decreasing = TRUE), ]

head(precio_medio_ord, n = 5)

```

¿Cuantos apartamentos hay en cada uno de esos barrios?

```{r}

airbnb_entire <- subset(airbnb_entire, Barrio %in% c('Palomas', 'Fuentelareina', 'Recoletos', 'El Plantío', 'Castellana') & TipoPropiedad == 'Apartment')

num_apartments <- table(airbnb_entire$Barrio)

num_apartments <- num_apartments[names(num_apartments) %in% c('Palomas', 'Fuentelareina', 'Recoletos', 'El Plantío', 'Castellana')]

df_num_apartments <- data.frame(Barrio = names(num_apartments), Num_Apartments = as.vector(num_apartments))

print(df_num_apartments)

```

Mostrar una dataframe con el nombre del barrio, el precio y el número de entradas.

Ayuda: Podeis crear un nuevo dataframe con las columnas "Barrio" y "Freq" que contenga el número de entradas en cada barrio y hacer un merge con el dataframe del punto anterior.

```{r}
nuevo_df <- merge(df_num_apartments, precio_medio_ord, by = "Barrio")

print(nuevo_df)

```

Partiendo del dataframe anterior, muestra los 5 barrios con mayor precio, pero que tengan más de 100 entradas de alquiler.

```{r}
library(dplyr)

airbnb_entire <- subset(airbnb, TipoAlquiler == "Entire home/apt")

airbnb_entire_filtrado <- airbnb_entire %>%
  group_by(Barrio) %>%
  summarize(num_registros = n()) %>%
  filter(num_registros > 100) %>%
  select(Barrio)

resultado <- airbnb_entire %>%
  filter(Barrio %in% airbnb_entire_filtrado$Barrio & !is.na(Precio) & Precio != "") %>%
  group_by(Barrio) %>%
  summarize(precio_medio = mean(as.numeric(Precio)), num_entradas = n()) %>%
  arrange(desc(precio_medio)) %>%
  slice(1:5)
  
print(resultado)

```

Dibuja el diagrama de densidad de distribución de los diferentes precios. Serían 5 gráficas, una por cada barrio.

```{r}
# Diagrama de densidad de precios del barrio Recoletos:
airbnb_recoletos <- airbnb_entire[airbnb_entire$Barrio == "Recoletos", ]

ggplot(airbnb_recoletos, aes(x = Precio)) +
  geom_density() +
  labs(title = "Diagrama de densidad de precios - Barrio Recoletos")

# Diagrama de densidad de precios del barrio Goya:
airbnb_goya <- airbnb_entire[airbnb_entire$Barrio == "Goya", ]

ggplot(airbnb_goya, aes(x = Precio)) +
  geom_density() +
  labs(title = "Diagrama de densidad de precios - Barrio Goya")

# Diagrama de densidad de precios del barrio Sol:
airbnb_sol <- airbnb_entire[airbnb_entire$Barrio == "Sol", ]

ggplot(airbnb_sol, aes(x = Precio)) +
  geom_density() +
  labs(title = "Diagrama de densidad de precio - Barrio Sol")

# Diagrama de densidad de precio del barrio Trafalgar:
airbnb_trafalgar <- airbnb_entire[airbnb_entire$Barrio == "Trafalgar", ]

ggplot(airbnb_trafalgar, aes(x = Precio)) +
  geom_density() +
  labs(title = "Diagrama de densidad de precio - Barrio Trafalgar")

# Diagrama de densidad de precio del barrio Justicia:
airbnb_justicia <- airbnb_entire[airbnb_entire$Barrio == "Justicia", ]

ggplot(airbnb_justicia, aes(x = Precio)) +
  geom_density() +
  labs(title = "Diagrama de densidad de precio - Barrio Justicia")

```

Calcula el tamaño medio, en metros cuadrados, para los 5 barrios anteriores y muestralo en el mismo dataframe junto con el precio y número de entradas

```{r}
barrios <- c("Recoletos", "Goya", "Justicia", "Sol", "Trafalgar")

metros_cuadrados_medio <- airbnb_entire %>%
  filter(Barrio %in% barrios) %>%
  group_by(Barrio) %>%
  summarize(metros_cuadrados_medio = mean(ifelse(is.na(MetrosCuadrados), mean(MetrosCuadrados, na.rm = TRUE), MetrosCuadrados)))

airbnb_5barrios_100 <- merge(resultado, metros_cuadrados_medio, by = "Barrio")

airbnb_5barrios_100

```

Dibuja el diagrama de densidad de distribución de los diferentes tamaños de apartamentos. Serían 5 gráficas, una por cada barrio.

```{r}
# Diagrama de densidad de tamaños de apartamentos del barrio Recoletos:
ggplot(airbnb_recoletos, aes(x = MetrosCuadrados)) +
  geom_density() +
  labs(title = "Tamaños de apartamentos - Barrio Recolectos")

# Diagrama de densidad de tamaños de apartamentos del barrio Goya:
ggplot(airbnb_goya, aes(x = MetrosCuadrados)) +
  geom_density() +
  labs(title = "Tamaños de apartamentos - Barrio Goya")

# Diagrama de densidad de tamaños de apartamentos del barrio Sol:
ggplot(airbnb_sol, aes(x = MetrosCuadrados)) +
  geom_density() +
  labs(title = "Tamaños de apartamentos - Barrio Sol")

# Diagrama de densidad de tamaños de apartamentos del barrio Trafalgar:
ggplot(airbnb_trafalgar, aes(x = MetrosCuadrados)) +
  geom_density() +
  labs(title = "Tamaños de apartamentos - Barrio Trafalgar")

# Diagrama de densidad de tamaños de apartamentos del barrio Justicia:
ggplot(airbnb_justicia, aes(x = MetrosCuadrados)) +
  geom_density() +
  labs(title = "Tamaños de apartamentos - Barrio Justicia")

```

Esta claro que las medias de metros cuadrados de cada uno de estos 5 barrios parecen ser diferentes, pero ¿son estadísticamente diferentes? ¿Que test habría que usar para comprobarlo?

```{r}
goya_m2 <- na.omit(airbnb_entire[airbnb_entire$Barrio == "Goya", "MetrosCuadrados"])

justicia_m2 <- na.omit(airbnb_entire[airbnb_entire$Barrio == "Justicia", "MetrosCuadrados"])

recoletos_m2 <- na.omit(airbnb_entire[airbnb_entire$Barrio == "Recoletos", "MetrosCuadrados"])

sol_m2 <- na.omit(airbnb_entire[airbnb_entire$Barrio == "Sol", "MetrosCuadrados"])

trafalgar_m2 <- na.omit(airbnb_entire[airbnb_entire$Barrio == "Trafalgar", "MetrosCuadrados"])

shapiro.test(justicia_m2)
shapiro.test(recoletos_m2)
shapiro.test(sol_m2)
shapiro.test(trafalgar_m2)

kruskal.test(list(goya_m2, justicia_m2, recoletos_m2, sol_m2, trafalgar_m2))


```

Para únicamente los pisos de alquiler en el barrio de Sol:

`barrio_sol<-subset(airbnb_entire,Barrio=="Sol")`

Calcular un modelo lineal que combine alguna de estas variables: \* NumBanyos \* NumDormitorios \* MaxOcupantes \* MetrosCuadrados

Primero calculamos la correlación para ver como se relacionan estas variables entre sí.

```{r}
barrio_sol<-subset(airbnb_entire,Barrio=="Sol")

barrio_sol_df <- barrio_sol[, c("NumBanyos", "NumDormitorios", "MaxOcupantes", "MetrosCuadrados")]

barrio_sol_df$MetrosCuadrados <- ifelse(is.na(barrio_sol_df$MetrosCuadrados), 0, barrio_sol_df$MetrosCuadrados)

cor(barrio_sol_df[, c("NumBanyos", "NumDormitorios", "MaxOcupantes", "MetrosCuadrados")])

```

Se observa que la correlación entre el número de dormitorios y los metros cuadrados es sorprendentemente baja. ¿Son de fiar esos números?

```{r}
#La correlación entre número de dormitorios y metros cuadrados es de 0.1641938. Los números no son de fiar.
```

Mediante un histograma o curvas de densidad podemos descartar números que notienen sentido en el dataframe barrio_sol, para tener una matriz de correlación que tenga mayor sentido.

```{r}
#Boxplot de NumBanyos
ggplot(barrio_sol, aes(x=NumBanyos)) + 
  geom_histogram() +
  scale_x_continuous(breaks = 1:10)


#Boxplot de NumDormitorios
ggplot(barrio_sol, aes(x=NumDormitorios)) + 
  geom_histogram() +
  scale_x_continuous(breaks = 1:10)

#Boxplotde MaxOcupantes
ggplot(barrio_sol, aes(x=MaxOcupantes)) + 
  geom_histogram() +
  scale_x_continuous(breaks = 1:20)


#Boxplot de MetrosCuadrados
ggplot(barrio_sol, aes(x=MetrosCuadrados)) + 
  geom_histogram()

#Filtrando datos del dataframe barrio_sol
barrio_sol_filtrado <- filter(barrio_sol,
                              NumBanyos >= 1 & NumBanyos <= 3,
                              NumDormitorios >= 1 & NumDormitorios <= 4,
                              MaxOcupantes >= 1 & MaxOcupantes <= 8,
                              MetrosCuadrados >= 25 & MetrosCuadrados <= 200)

#Creando nueva matriz de correlación
variables <- c("NumBanyos", "NumDormitorios", "MaxOcupantes", "MetrosCuadrados")

cor_mat <- cor(barrio_sol_filtrado[, variables])

cor_mat


```

Una vez que hayamos filtrado los datos correspondientes calcular el valor o la combinación de valores que mejor nos permite obtener el precio de un inmueble.

```{r}

modelo <- lm(Precio ~ NumBanyos + NumDormitorios + MaxOcupantes + MetrosCuadrados, data = barrio_sol_filtrado)

summary(modelo)

```

¿Que variable es más fiable para conocer el precio de un inmueble, el número de habitaciones o los metros cuadrados?

```{r}
#Es más fiable el NumDormitorios ya que tiene un Coeficiente de 22.2516, mientras MetrosCuadrados tiene un coeficiente de -0.3327.

```

Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada metro cuadrado extra del piso?

```{r}
confint(modelo)["MetrosCuadrados", ]

```

Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada habitación?

```{r}
confint(modelo)["NumDormitorios", ]

```

¿Cual es la probabilidad de encontrar, en el barrio de Sol, un apartamento en alquiler con 3 dormitorios? ¿Cual es el intervalo de confianza de esa probabilidad?

```{r}

total_apartamentos <- nrow(barrio_sol)
apartamentos_3_dormitorios <- sum(barrio_sol$NumDormitorios == 3)

probabilidad_estimada <- apartamentos_3_dormitorios / total_apartamentos

cat("La probabilidad de encontrar un apartamento con 3 dormitorios en el barrio de Sol es:", probabilidad_estimada, "\n")

intervalo_confianza <- binom.test(x = apartamentos_3_dormitorios, n = total_apartamentos, conf.level = 0.95)

cat("El intervalo de confianza del 95% para la probabilidad de encontrar un apartamento con 3 dormitorios es:", 
    intervalo_confianza$conf.int, "\n")

```
